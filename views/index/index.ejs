<%- include('../template/header',{title: 'PiWall controller'})%> 
<%- include('../template/navbar') %> 
<div class='page-content'>
    <button id='find_client' class="btn btn-sm btn-primary" type="button">
      <span class="spinner-border spinner-border-sm spinner-find-client d-none" role="status" aria-hidden="true"></span>
      Search device
    </button>

    <hr>
    
    <div class="row">
      <div class="col-3">
        <%- include('components/bookmarkList',{bookmarks: bookmarks}) %> 
      </div>
      <div class="col-9">
        <%- include('components/clientList',{clients: clients})%> 
      </div>
    </div>
      
      
    <div class="cursor-pointer border col-lg-3 col-sm-12 ml-2 p-0 row remote-client-template d-none">
      <div class="col-lg-6 col-sm-12  p-0">
        <img src="/images/no_image.png" class='img-fluid screen_image'>
      </div>
      <div class="col-lg-6 col-sm-12">
        <h3 class="mb-1 font-weight-bold hostname"></h3>
        <small class="text-mute">
          <span class="p-2 font-weight-bold ip_address"></span>
          <span class="mac_address"></span>
        </small>
        <i class="fas fa-paper-plane cursor-pointer send-url" title="open page in remote browser"></i>
        <i class="fas fa-camera cursor-pointer update-screenshot" title="take a screenshot"></i>
        <i class="fas fa-window-close cursor-pointer close-all-browser-page" title="close all remote browser page"></i>
        <i class="fas fa-terminal cursor-pointer open-terminal" title="open ssh connection"></i>
      </div>
    </div>
</div>


    <script>
      $(document).ready((event) =>{
        //load viewer image if screenshot is preload
        $('.device-image').each((index,element) =>{
          addImageViewer(element);
        })


        const containers = document.querySelectorAll('.BlockLayout'); 
        var deviceDroppedId = null;
        var overContainer = null;

        const droppable = new Draggable.Draggable(containers, {
          draggable: '.isDraggable',
          dropzone: '.isDropzone',
            mirror: {
              constrainDimensions: true,
            },
          });
    
          droppable.on('drag:stop', (evt) => {
            var bookmark_id = evt.originalSource.dataset.bookmarkId;
            var client_id = overContainer.dataset.id;
            if(bookmark_id && client_id){
              openBookmarkToClient(bookmark_id,client_id);
            }
          });

          droppable.on('drag:over:container', function (event) {
            overContainer = event.overContainer;
          })

          droppable.on('drag:out:container', function (event) {
            overContainer = null;
          })

      })

      $(document).on('click','.update-screenshot', event =>{
        var main_element = event.currentTarget.closest('.remote-client-item');
        var id = main_element.dataset.id
        axios.get(`/getScreenshot/${id}`)
        .then((response) =>{
          var image_element = $(main_element).find('.screen_image');
          image_element.attr('src',"data:image/png;base64,"+response.data);
          addImageViewer(image_element.get(0));
        })
      })

      $(document).on('click','.reboot-remote-device', event =>{
        var main_element = event.currentTarget.closest('.remote-client-item');
        var id = main_element.dataset.id
        notifier.asyncBlock(
          axios.get(`/reboot/${id}`),
          resp => notifier.success(`the remote device has been rebooted`),
        );
      })

      $(document).on('click','.close-all-browser-page', event =>{
        confirmDialog('Close remote browser','Do you really want close all remote browser?',function (result) {
          if(result){
            var main_element = event.currentTarget.closest('.remote-client-item');
            var id = main_element.dataset.id
            simpleGet(`/closeRemoteBrowser/${id}`)
          }
        });
      })

      $(document).on('click','.show-osd-number',event =>{
        var main_element = event.currentTarget.closest('.remote-client-item');
        var id = main_element.dataset.id
        
        notifier.asyncBlock(
          axios.get(`/osd/${id}`),
          resp => notifier.success(),
        );
      })

      function newClientRow(args){
        var row = $(".remote-client-template").clone()
        row.removeClass('d-none remote-client-template')
        .addClass('remote-client-item')
        .attr('data-ip-address',args.ip)
        .attr('data-id',args.id)

        row.find('.hostname').html(args.hostname);
    
        row.find('.ip_address').html(args.ip);
        row.find('.mac_address').html(`(${args.mac})`);

        addImageViewer(row.find('.screen_image').get(0));
        $('.list-client').children('.row').append(row)       
      }

      $(document).on('click','.send-url',event => {
        var element = event.currentTarget.closest('.remote-client-item');
        bootbox.prompt({
          title: "Specify the url", 
          centerVertical: true,
          callback: function(url){
            if(url){
              var regex = new RegExp(/[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)?/gi);
              if (url.match(regex) === null) {
                alert("Invalid url");
              } else {
                notifier.asyncBlock(
                  axios.post('/openUrl',{
                    id: element.dataset.id,
                    url:url
                   }),
                  resp => notifier.success(`${resp.data.length} posts has been loaded`),
                );
              }
            }
          }
        });
      })

      $('#find_client').on('click',(event) =>{
        disableFindButton(true);
        axios.get('/findNewClient')
        .then((response) =>{
          console.log(response.data);
          disableFindButton(false);
          for(const element of response.data){
            if(clientItemExists(element.ip) === false){
              newClientRow(element)
            }
            
          }
        })
      })

      function clientItemExists(ip){
        var count = $(`[data-ipaddress="${ip}"]`).length;
        return count === 0 ? false : true;
      }

      function disableFindButton(status){
        if(status){
          $('.spinner-find-client').removeClass('d-none');
          $('#find_client').attr('disabled','disabled')
        }else{
          $('.spinner-find-client').addClass('d-none');
          $('#find_client').removeAttr('disabled')
        }
      }

      function addImageViewer(element){
        new Viewer(element, {
          modal: true,
          backdrop: true,
          viewed() {},
        });
      }

      function successNotification(message){
        new AWN().success(message)
      }

      function imageExists(filename){
        console.log('filename',filename)
        fetch('https://i1.wp.com/www.giacomocusano.com/wp-content/uploads/2016/07/coastal-wash-web.jpg?resize=1024%2C675&ssl=1', { method: 'HEAD' })
        .then(res => {
            if (res.ok) {
                console.log('Image exists.');
            } else {
                console.log('Image does not exist.');
            }
        }).catch(err => console.log('Error:', err));
      }

      function confirmDialog(title,message,callback){
        bootbox.confirm({
          title: title,
          message: message,
          buttons: {
              cancel: {
                  label: '<i class="fa fa-times"></i> Cancel'
              },
              confirm: {
                  label: '<i class="fa fa-check"></i> Confirm'
              }
          },
          callback: callback
        });
      }

      function simpleGet(action){
        axios.get(action)
        .then((response) =>{
          if(response.status === 200){
            successNotification();
          }
        })
      }

      function openBookmarkToClient(bookmark_id,client_id){
        confirmDialog('Open bookmark','do you want to proceed to open this bookmark on your device?',(result) =>{
          if(result){
            simpleGet(`openBookmark/${bookmark_id}/${client_id}`)
          }
        })
      }
    </script>

    <style>
      .cursor-pointer{
        cursor: pointer;
      }
      .my-handle{
        cursor:move;
      }
    </style>
    
  </body>
</html>
